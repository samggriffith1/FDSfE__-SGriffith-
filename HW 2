{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO27/52gs0SIkTHb7eQEG/l"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Sam Griffith - GEOG271- HW1 Descriptive Statistics"],"metadata":{"id":"906sAouDdCzQ"}},{"cell_type":"code","execution_count":7,"metadata":{"id":"DxevFzSpYn0l","executionInfo":{"status":"ok","timestamp":1705093642269,"user_tz":300,"elapsed":209,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}}},"outputs":[],"source":["import pandas as pd\n","import pylab\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["pparks=pd.read_csv(\"http://data-phl.opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.csv\")\n"],"metadata":{"id":"PwBZNi6UY7oj","executionInfo":{"status":"ok","timestamp":1705094112918,"user_tz":300,"elapsed":670,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["pparks.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TP6Os6OfcN9S","executionInfo":{"status":"ok","timestamp":1705094115614,"user_tz":300,"elapsed":107,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"5d083a7e-33fc-401b-cff3-e792d6fec19e"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 508 entries, 0 to 507\n","Data columns (total 25 columns):\n"," #   Column                   Non-Null Count  Dtype  \n","---  ------                   --------------  -----  \n"," 0   OBJECTID                 508 non-null    int64  \n"," 1   PUBLIC_NAME              508 non-null    object \n"," 2   PARENT_NAME              508 non-null    object \n"," 3   NESTED                   508 non-null    object \n"," 4   OFFICIAL_NAME            285 non-null    object \n"," 5   LABEL                    507 non-null    object \n"," 6   ALIAS                    352 non-null    object \n"," 7   DPP_ASSET_ID             508 non-null    int64  \n"," 8   ADDRESS_911              500 non-null    object \n"," 9   ZIP_CODE                 508 non-null    int64  \n"," 10  ADDRESS_BRT              427 non-null    object \n"," 11  ALIAS_ADDRESS            428 non-null    object \n"," 12  ACREAGE                  508 non-null    float64\n"," 13  PROPERTY_CLASSIFICATION  508 non-null    object \n"," 14  PPR_USE                  508 non-null    object \n"," 15  PPR_PROG_DISTRICT        508 non-null    object \n"," 16  PPR_OPS_DISTRICT         508 non-null    object \n"," 17  COUNCIL_DISTRICT         507 non-null    object \n"," 18  POLICE_DISTRICT          507 non-null    object \n"," 19  CITY_SCALE_MAPS          508 non-null    object \n"," 20  LOCAL_SCALE_MAPS         508 non-null    object \n"," 21  PROGRAM_SITES            508 non-null    object \n"," 22  COMMENTS                 134 non-null    object \n"," 23  Shape__Area              508 non-null    float64\n"," 24  Shape__Length            508 non-null    float64\n","dtypes: float64(3), int64(3), object(19)\n","memory usage: 99.3+ KB\n"]}]},{"cell_type":"code","source":["data.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-NTgKjzbh7ej","executionInfo":{"status":"ok","timestamp":1705094838284,"user_tz":300,"elapsed":119,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"1233d3e2-d1e2-4606-b8a6-3eaad0bc35d2"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(508, 25)"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["pparks.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oe4N9fkNim40","executionInfo":{"status":"ok","timestamp":1705094330389,"user_tz":300,"elapsed":115,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"b4610158-c9da-4f3a-c329-879516788a85"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['OBJECTID', 'PUBLIC_NAME', 'PARENT_NAME', 'NESTED', 'OFFICIAL_NAME',\n","       'LABEL', 'ALIAS', 'DPP_ASSET_ID', 'ADDRESS_911', 'ZIP_CODE',\n","       'ADDRESS_BRT', 'ALIAS_ADDRESS', 'ACREAGE', 'PROPERTY_CLASSIFICATION',\n","       'PPR_USE', 'PPR_PROG_DISTRICT', 'PPR_OPS_DISTRICT', 'COUNCIL_DISTRICT',\n","       'POLICE_DISTRICT', 'CITY_SCALE_MAPS', 'LOCAL_SCALE_MAPS',\n","       'PROGRAM_SITES', 'COMMENTS', 'Shape__Area', 'Shape__Length'],\n","      dtype='object')"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["pparks.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":602},"id":"Di8KNWY-iuOr","executionInfo":{"status":"ok","timestamp":1705095401084,"user_tz":300,"elapsed":135,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"7e81563a-e3cf-4478-f069-b650e2e98a26"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   OBJECTID                                     PUBLIC_NAME  \\\n","0         1  William H (Billy) Markward Memorial Playground   \n","1         2                                Schuylkill Banks   \n","2         3                           Schuylkill River Park   \n","3         4                           Frankford Boat Launch   \n","4         5                            Robert A Borski Park   \n","\n","             PARENT_NAME NESTED  \\\n","0  Schuylkill River Park      Y   \n","1       Schuylkill Banks      N   \n","2  Schuylkill River Park      N   \n","3  Frankford Boat Launch      N   \n","4   Robert A Borski Park      N   \n","\n","                                     OFFICIAL_NAME                  LABEL  \\\n","0  William H. (Billy) Markward Memorial Playground               Markward   \n","1                                              NaN       Schuylkill Banks   \n","2                                              NaN  Schuylkill River Park   \n","3                            Frankford Boat Launch       Frankford Launch   \n","4                            Robert A. Borski Park                 Borski   \n","\n","                                               ALIAS  DPP_ASSET_ID  \\\n","0                      Joseph O'Connor Memorial Pool          1903   \n","1                                                NaN          2794   \n","2                                                NaN          2992   \n","3       PA Fish & Boat;Frankford Arsenal Boat Launch          3090   \n","4  Orthodox Street Parcel; Bridesburg Riverfront ...          3091   \n","\n","        ADDRESS_911  ZIP_CODE  ... PPR_PROG_DISTRICT PPR_OPS_DISTRICT  \\\n","0    400 S TANEY ST     19146  ...                14              5;7   \n","1  2425 CHESTNUT ST     19103  ...             10;14              5;7   \n","2    400 S TANEY ST     19146  ...                14             5, 7   \n","3    5625 TACONY ST     19137  ...                 6                2   \n","4  3101 ORTHODOX ST     19137  ...                 7                2   \n","\n","   COUNCIL_DISTRICT POLICE_DISTRICT CITY_SCALE_MAPS LOCAL_SCALE_MAPS  \\\n","0                 2            9;17               Y                Y   \n","1               2;5            9;17               Y                Y   \n","2                 2               9               Y                Y   \n","3                 6              15               Y                Y   \n","4                 6              15               Y                Y   \n","\n","  PROGRAM_SITES                                           COMMENTS  \\\n","0             Y           Markward site includes the O'Connor Pool   \n","1             N    Bill 160113 (4/14/16) -South of South St Bridge   \n","2             N                                                NaN   \n","3             N                                                NaN   \n","4             N  Officially acquired from PAID in 10/2019. Doc ...   \n","\n","     Shape__Area Shape__Length  \n","0   25871.441406   1094.402639  \n","1  101477.171875   9300.670275  \n","2   27216.929688    799.048584  \n","3   78515.335938   1585.376114  \n","4   72926.187500   1304.901416  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-373c8fc3-4131-4c0b-9e27-c58efa4f5174\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>OBJECTID</th>\n","      <th>PUBLIC_NAME</th>\n","      <th>PARENT_NAME</th>\n","      <th>NESTED</th>\n","      <th>OFFICIAL_NAME</th>\n","      <th>LABEL</th>\n","      <th>ALIAS</th>\n","      <th>DPP_ASSET_ID</th>\n","      <th>ADDRESS_911</th>\n","      <th>ZIP_CODE</th>\n","      <th>...</th>\n","      <th>PPR_PROG_DISTRICT</th>\n","      <th>PPR_OPS_DISTRICT</th>\n","      <th>COUNCIL_DISTRICT</th>\n","      <th>POLICE_DISTRICT</th>\n","      <th>CITY_SCALE_MAPS</th>\n","      <th>LOCAL_SCALE_MAPS</th>\n","      <th>PROGRAM_SITES</th>\n","      <th>COMMENTS</th>\n","      <th>Shape__Area</th>\n","      <th>Shape__Length</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>William H (Billy) Markward Memorial Playground</td>\n","      <td>Schuylkill River Park</td>\n","      <td>Y</td>\n","      <td>William H. (Billy) Markward Memorial Playground</td>\n","      <td>Markward</td>\n","      <td>Joseph O'Connor Memorial Pool</td>\n","      <td>1903</td>\n","      <td>400 S TANEY ST</td>\n","      <td>19146</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>5;7</td>\n","      <td>2</td>\n","      <td>9;17</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Markward site includes the O'Connor Pool</td>\n","      <td>25871.441406</td>\n","      <td>1094.402639</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Schuylkill Banks</td>\n","      <td>Schuylkill Banks</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>Schuylkill Banks</td>\n","      <td>NaN</td>\n","      <td>2794</td>\n","      <td>2425 CHESTNUT ST</td>\n","      <td>19103</td>\n","      <td>...</td>\n","      <td>10;14</td>\n","      <td>5;7</td>\n","      <td>2;5</td>\n","      <td>9;17</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>Bill 160113 (4/14/16) -South of South St Bridge</td>\n","      <td>101477.171875</td>\n","      <td>9300.670275</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Schuylkill River Park</td>\n","      <td>Schuylkill River Park</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>Schuylkill River Park</td>\n","      <td>NaN</td>\n","      <td>2992</td>\n","      <td>400 S TANEY ST</td>\n","      <td>19146</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>5, 7</td>\n","      <td>2</td>\n","      <td>9</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>27216.929688</td>\n","      <td>799.048584</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Frankford Boat Launch</td>\n","      <td>Frankford Boat Launch</td>\n","      <td>N</td>\n","      <td>Frankford Boat Launch</td>\n","      <td>Frankford Launch</td>\n","      <td>PA Fish &amp; Boat;Frankford Arsenal Boat Launch</td>\n","      <td>3090</td>\n","      <td>5625 TACONY ST</td>\n","      <td>19137</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>78515.335938</td>\n","      <td>1585.376114</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Robert A Borski Park</td>\n","      <td>Robert A Borski Park</td>\n","      <td>N</td>\n","      <td>Robert A. Borski Park</td>\n","      <td>Borski</td>\n","      <td>Orthodox Street Parcel; Bridesburg Riverfront ...</td>\n","      <td>3091</td>\n","      <td>3101 ORTHODOX ST</td>\n","      <td>19137</td>\n","      <td>...</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>Officially acquired from PAID in 10/2019. Doc ...</td>\n","      <td>72926.187500</td>\n","      <td>1304.901416</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-373c8fc3-4131-4c0b-9e27-c58efa4f5174')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-373c8fc3-4131-4c0b-9e27-c58efa4f5174 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-373c8fc3-4131-4c0b-9e27-c58efa4f5174');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-05d0ecb9-8969-444b-87ef-6edaf4eaa475\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-05d0ecb9-8969-444b-87ef-6edaf4eaa475')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-05d0ecb9-8969-444b-87ef-6edaf4eaa475 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["pparks.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":446},"id":"e_xBp2ufk1Zz","executionInfo":{"status":"ok","timestamp":1705095391127,"user_tz":300,"elapsed":151,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"bfc90e06-60f8-4bbb-bdb4-bfc71a268d7b"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     OBJECTID                    PUBLIC_NAME                PARENT_NAME  \\\n","503       504      61st and Cobbs Creek Park           Cobbs Creek Park   \n","504       505      Lawrence Court Breezeways  Lawrence Court Breezeways   \n","505       506                  Fernhill Park              Fernhill Park   \n","506       507  School District Area (Gorgas)          Susan Gorgas Park   \n","507       508              Susan Gorgas Park          Susan Gorgas Park   \n","\n","    NESTED      OFFICIAL_NAME                 LABEL                    ALIAS  \\\n","503      Y                NaN  61st and Cobbs Creek                            \n","504      N                NaN    Lawrence Breezeway  Lawrence Court Walkways   \n","505      N                NaN              Fernhill                            \n","506      Y                NaN                   NaN                      NaN   \n","507      Y  Susan Gorgas Park                Gorgas                      NaN   \n","\n","     DPP_ASSET_ID         ADDRESS_911  ZIP_CODE  ... PPR_PROG_DISTRICT  \\\n","503          3481  61ST & COBBS CREEK     19143  ...                12   \n","504          3867     335 LAWRENCE CT     19106  ...                15   \n","505           833      4600 MORRIS ST     19144  ...                 5   \n","506             0                 NaN     19128  ...                 4   \n","507           803      6424 RIDGE AVE     19128  ...                 4   \n","\n","    PPR_OPS_DISTRICT  COUNCIL_DISTRICT POLICE_DISTRICT CITY_SCALE_MAPS  \\\n","503                8                 3              18               Y   \n","504                5                 1               6               N   \n","505                4                 8              39               Y   \n","506                4                 4               5               N   \n","507                4                 4               5               Y   \n","\n","    LOCAL_SCALE_MAPS PROGRAM_SITES  \\\n","503                Y             N   \n","504                Y             N   \n","505                Y             N   \n","506                N             N   \n","507                Y             N   \n","\n","                                           COMMENTS    Shape__Area  \\\n","503                                             NaN   35596.937500   \n","504                                             NaN    1945.863281   \n","505                                             NaN  294423.921875   \n","506  1927 Transferred to SD to manage and maintain.   58382.015625   \n","507                                             NaN   87612.011719   \n","\n","    Shape__Length  \n","503   1037.395645  \n","504    394.259401  \n","505   4327.841898  \n","506    986.309218  \n","507   1246.794516  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-6d582c76-d41b-48e9-948b-b6a2b30b7121\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>OBJECTID</th>\n","      <th>PUBLIC_NAME</th>\n","      <th>PARENT_NAME</th>\n","      <th>NESTED</th>\n","      <th>OFFICIAL_NAME</th>\n","      <th>LABEL</th>\n","      <th>ALIAS</th>\n","      <th>DPP_ASSET_ID</th>\n","      <th>ADDRESS_911</th>\n","      <th>ZIP_CODE</th>\n","      <th>...</th>\n","      <th>PPR_PROG_DISTRICT</th>\n","      <th>PPR_OPS_DISTRICT</th>\n","      <th>COUNCIL_DISTRICT</th>\n","      <th>POLICE_DISTRICT</th>\n","      <th>CITY_SCALE_MAPS</th>\n","      <th>LOCAL_SCALE_MAPS</th>\n","      <th>PROGRAM_SITES</th>\n","      <th>COMMENTS</th>\n","      <th>Shape__Area</th>\n","      <th>Shape__Length</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>503</th>\n","      <td>504</td>\n","      <td>61st and Cobbs Creek Park</td>\n","      <td>Cobbs Creek Park</td>\n","      <td>Y</td>\n","      <td>NaN</td>\n","      <td>61st and Cobbs Creek</td>\n","      <td></td>\n","      <td>3481</td>\n","      <td>61ST &amp; COBBS CREEK</td>\n","      <td>19143</td>\n","      <td>...</td>\n","      <td>12</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>35596.937500</td>\n","      <td>1037.395645</td>\n","    </tr>\n","    <tr>\n","      <th>504</th>\n","      <td>505</td>\n","      <td>Lawrence Court Breezeways</td>\n","      <td>Lawrence Court Breezeways</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>Lawrence Breezeway</td>\n","      <td>Lawrence Court Walkways</td>\n","      <td>3867</td>\n","      <td>335 LAWRENCE CT</td>\n","      <td>19106</td>\n","      <td>...</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>1945.863281</td>\n","      <td>394.259401</td>\n","    </tr>\n","    <tr>\n","      <th>505</th>\n","      <td>506</td>\n","      <td>Fernhill Park</td>\n","      <td>Fernhill Park</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>Fernhill</td>\n","      <td></td>\n","      <td>833</td>\n","      <td>4600 MORRIS ST</td>\n","      <td>19144</td>\n","      <td>...</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>39</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>294423.921875</td>\n","      <td>4327.841898</td>\n","    </tr>\n","    <tr>\n","      <th>506</th>\n","      <td>507</td>\n","      <td>School District Area (Gorgas)</td>\n","      <td>Susan Gorgas Park</td>\n","      <td>Y</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>19128</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1927 Transferred to SD to manage and maintain.</td>\n","      <td>58382.015625</td>\n","      <td>986.309218</td>\n","    </tr>\n","    <tr>\n","      <th>507</th>\n","      <td>508</td>\n","      <td>Susan Gorgas Park</td>\n","      <td>Susan Gorgas Park</td>\n","      <td>Y</td>\n","      <td>Susan Gorgas Park</td>\n","      <td>Gorgas</td>\n","      <td>NaN</td>\n","      <td>803</td>\n","      <td>6424 RIDGE AVE</td>\n","      <td>19128</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>87612.011719</td>\n","      <td>1246.794516</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d582c76-d41b-48e9-948b-b6a2b30b7121')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6d582c76-d41b-48e9-948b-b6a2b30b7121 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6d582c76-d41b-48e9-948b-b6a2b30b7121');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9832dbf1-2090-4ed1-ae72-530661de756f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9832dbf1-2090-4ed1-ae72-530661de756f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9832dbf1-2090-4ed1-ae72-530661de756f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["meanps = pparks['ACREAGE'].mean()"],"metadata":{"id":"0dlUBvvlryFD","executionInfo":{"status":"ok","timestamp":1705096751866,"user_tz":300,"elapsed":109,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["ACREAGE = data['ACREAGE']\n","ACREAGE"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ngF4x0CCtIUz","executionInfo":{"status":"ok","timestamp":1705097117146,"user_tz":300,"elapsed":124,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"7fe0d8d0-be67-4a07-8d63-2b228acdde1f"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       3.752791\n","1      14.717255\n","2       3.947826\n","3      11.369730\n","4      10.567337\n","         ...    \n","503     5.163878\n","504     0.282288\n","505    42.619078\n","506     8.446877\n","507    12.675577\n","Name: ACREAGE, Length: 508, dtype: float64"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["mean_ACREAGE = round(ACREAGE.mean(),4)\n","print('The mean wage in the data set is', mean_ACREAGE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Sqr5JfEtQwI","executionInfo":{"status":"ok","timestamp":1705097260860,"user_tz":300,"elapsed":103,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"2277b981-38a0-480a-9173-abcf4572e7ea"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["The mean wage in the data set is 19.9536\n"]}]},{"cell_type":"code","source":["median_ACREAGE= round(ACREAGE.median(),4)\n","print('The median wage in the data set is', median_ACREAGE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k0H7LdK_t6B_","executionInfo":{"status":"ok","timestamp":1705097390400,"user_tz":300,"elapsed":109,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"9ec15dfd-f9bf-4bdc-de64-74628f63e756"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["The median wage in the data set is 3.5996\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"WwKhO45N3QMt"}},{"cell_type":"markdown","source":["1. I can conclude from the data that the median would give a more appropriate view of the data because of the skewedness of the data\n","2. The ACREAGE is a positively skewed distribution."],"metadata":{"id":"3m5lmuqCuat0"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"3VLcLPZDv30o","executionInfo":{"status":"ok","timestamp":1705097837104,"user_tz":300,"elapsed":115,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["ax = data['ACREAGE'].hist(bins=20)\n","ax.set_xlabel('Philly park size in Acres')\n","ax.set_ylabel('Number of Parks')\n","ax.set_title('Distribution of park sizes in Philadelphia')\n","ax.axvline(mean_ACREAGE, color='red', linestyle='solid', linewidth=2, alpha= .8)\n","ax.axvline(median_ACREAGE, color='green', linestyle='solid', linewidth=2, alpha= .8)\n","ax.legend([mean_ACREAGE, median_ACREAGE], labels = ['Mean', 'Median']);\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"mQlo6ZC4wFQY","executionInfo":{"status":"ok","timestamp":1705098870917,"user_tz":300,"elapsed":487,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"4ec90fdf-1d3f-4659-e677-6ed28597169d"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-77-1890977ffdb8>:7: UserWarning: You have mixed positional and keyword arguments, some input may be discarded.\n","  ax.legend([mean_ACREAGE, median_ACREAGE], labels = ['Mean', 'Median']);\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["The graph demonstrates that an overwhelmiing majority of the parks in Philadelphia are under 100 acres."],"metadata":{"id":"dOZ9dY0S0FBr"}},{"cell_type":"code","source":["stdps= ACREAGE\n","print(\"the standard deviation of the park sizes is\", stdps)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GVr3us2i0W3E","executionInfo":{"status":"ok","timestamp":1705099280526,"user_tz":300,"elapsed":102,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"56e6ca43-b17f-45e7-d9bd-fa430e106d34"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["the standard deviation of the park sizes is 0       3.752791\n","1      14.717255\n","2       3.947826\n","3      11.369730\n","4      10.567337\n","         ...    \n","503     5.163878\n","504     0.282288\n","505    42.619078\n","506     8.446877\n","507    12.675577\n","Name: ACREAGE, Length: 508, dtype: float64\n"]}]},{"cell_type":"code","source":["ax = pparks[~(pparks[\"ACREAGE\"]==\"Unkown\")][\"ACREAGE\"].unique()\n","smallparks = pparks.loc[pparks['ACREAGE'] < 10]\n","smallparks.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"id":"DdCNjH3917p3","executionInfo":{"status":"ok","timestamp":1705099563415,"user_tz":300,"elapsed":152,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"e3415455-3f9a-4ee0-fdea-0b6be8377e19"},"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    OBJECTID                                     PUBLIC_NAME  \\\n","0          1  William H (Billy) Markward Memorial Playground   \n","2          3                           Schuylkill River Park   \n","15        16                        Whitby Avenue Playground   \n","16        17                          29th and Passyunk Park   \n","17        18                           Price Street Play Lot   \n","\n","               PARENT_NAME NESTED  \\\n","0    Schuylkill River Park      Y   \n","2    Schuylkill River Park      N   \n","15        Cobbs Creek Park      Y   \n","16  29th and Passyunk Park      N   \n","17   Price Street Play Lot      N   \n","\n","                                      OFFICIAL_NAME                  LABEL  \\\n","0   William H. (Billy) Markward Memorial Playground               Markward   \n","2                                               NaN  Schuylkill River Park   \n","15                                              NaN                 Whitby   \n","16                                              NaN      29th and Passyunk   \n","17                                              NaN               Price St   \n","\n","                            ALIAS  DPP_ASSET_ID           ADDRESS_911  \\\n","0   Joseph O'Connor Memorial Pool          1903        400 S TANEY ST   \n","2                             NaN          2992        400 S TANEY ST   \n","15                                         1372  1300 COBBS CREEK PKY   \n","16                                          432   2827 W PASSYUNK AVE   \n","17                                          826        185 W PRICE ST   \n","\n","    ZIP_CODE  ... PPR_PROG_DISTRICT PPR_OPS_DISTRICT  COUNCIL_DISTRICT  \\\n","0      19146  ...                14              5;7                 2   \n","2      19146  ...                14             5, 7                 2   \n","15     19143  ...                13                8                 3   \n","16     19145  ...                14                7                 2   \n","17     19144  ...                 4                4                 8   \n","\n","   POLICE_DISTRICT CITY_SCALE_MAPS LOCAL_SCALE_MAPS PROGRAM_SITES  \\\n","0             9;17               Y                Y             Y   \n","2                9               Y                Y             N   \n","15              12               Y                Y             N   \n","16               1               Y                Y             N   \n","17              14               Y                Y             N   \n","\n","                                    COMMENTS   Shape__Area Shape__Length  \n","0   Markward site includes the O'Connor Pool  25871.441406   1094.402639  \n","2                                        NaN  27216.929688    799.048584  \n","15                                       NaN  38916.484375    949.498194  \n","16                                       NaN   3830.242188    247.032048  \n","17                                       NaN   1249.839844    143.734003  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-f457f9e1-19d5-4f1a-a5ad-a9e60714d083\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>OBJECTID</th>\n","      <th>PUBLIC_NAME</th>\n","      <th>PARENT_NAME</th>\n","      <th>NESTED</th>\n","      <th>OFFICIAL_NAME</th>\n","      <th>LABEL</th>\n","      <th>ALIAS</th>\n","      <th>DPP_ASSET_ID</th>\n","      <th>ADDRESS_911</th>\n","      <th>ZIP_CODE</th>\n","      <th>...</th>\n","      <th>PPR_PROG_DISTRICT</th>\n","      <th>PPR_OPS_DISTRICT</th>\n","      <th>COUNCIL_DISTRICT</th>\n","      <th>POLICE_DISTRICT</th>\n","      <th>CITY_SCALE_MAPS</th>\n","      <th>LOCAL_SCALE_MAPS</th>\n","      <th>PROGRAM_SITES</th>\n","      <th>COMMENTS</th>\n","      <th>Shape__Area</th>\n","      <th>Shape__Length</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>William H (Billy) Markward Memorial Playground</td>\n","      <td>Schuylkill River Park</td>\n","      <td>Y</td>\n","      <td>William H. (Billy) Markward Memorial Playground</td>\n","      <td>Markward</td>\n","      <td>Joseph O'Connor Memorial Pool</td>\n","      <td>1903</td>\n","      <td>400 S TANEY ST</td>\n","      <td>19146</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>5;7</td>\n","      <td>2</td>\n","      <td>9;17</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Markward site includes the O'Connor Pool</td>\n","      <td>25871.441406</td>\n","      <td>1094.402639</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Schuylkill River Park</td>\n","      <td>Schuylkill River Park</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>Schuylkill River Park</td>\n","      <td>NaN</td>\n","      <td>2992</td>\n","      <td>400 S TANEY ST</td>\n","      <td>19146</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>5, 7</td>\n","      <td>2</td>\n","      <td>9</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>27216.929688</td>\n","      <td>799.048584</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>16</td>\n","      <td>Whitby Avenue Playground</td>\n","      <td>Cobbs Creek Park</td>\n","      <td>Y</td>\n","      <td>NaN</td>\n","      <td>Whitby</td>\n","      <td></td>\n","      <td>1372</td>\n","      <td>1300 COBBS CREEK PKY</td>\n","      <td>19143</td>\n","      <td>...</td>\n","      <td>13</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>12</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>38916.484375</td>\n","      <td>949.498194</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>17</td>\n","      <td>29th and Passyunk Park</td>\n","      <td>29th and Passyunk Park</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>29th and Passyunk</td>\n","      <td></td>\n","      <td>432</td>\n","      <td>2827 W PASSYUNK AVE</td>\n","      <td>19145</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>3830.242188</td>\n","      <td>247.032048</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>18</td>\n","      <td>Price Street Play Lot</td>\n","      <td>Price Street Play Lot</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>Price St</td>\n","      <td></td>\n","      <td>826</td>\n","      <td>185 W PRICE ST</td>\n","      <td>19144</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>14</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>1249.839844</td>\n","      <td>143.734003</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f457f9e1-19d5-4f1a-a5ad-a9e60714d083')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f457f9e1-19d5-4f1a-a5ad-a9e60714d083 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f457f9e1-19d5-4f1a-a5ad-a9e60714d083');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e4ede88b-c935-4053-abc3-8aacb155afb3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4ede88b-c935-4053-abc3-8aacb155afb3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e4ede88b-c935-4053-abc3-8aacb155afb3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["mean_smallparks = round(smallparks ['ACREAGE'].mean(), 4)\n","print('The mean of smallparks in the data set is', mean_smallparks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0FHtDdURB2mH","executionInfo":{"status":"ok","timestamp":1705104013946,"user_tz":300,"elapsed":108,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"ae6cbf42-9077-4857-9098-a6390e3c67d1"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["The mean of smallparks in the data set is 2.9414\n"]}]},{"cell_type":"code","source":["median_smallparks = round(smallparks ['ACREAGE'].median(), 4)\n","print('The median of small parks in the data set is ', median_smallparks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QKFSe2HMHpZl","executionInfo":{"status":"ok","timestamp":1705104115391,"user_tz":300,"elapsed":101,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"e61f1880-5b08-4d54-ee71-76c67f52c011"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["The median of small parks in the data set is  2.1668\n"]}]},{"cell_type":"code","source":["ax = smallparks[\"ACREAGE\"].hist(bins=20)\n","ax.set_xlabel('Philly Park Sizes in Acres')\n","ax.set_ylabel('Number of Parks')\n","ax.set_title('Histogram Showing the Distribution of Parks with sizes less than 10 acres in Philly')\n","ax.axvline(mean_smallparks, color='green', linestyle='solid', linewidth=2, alpha= .8)\n","ax.axvline(median_smallparks, color='red', linestyle='solid', linewidth=2, alpha= .8)\n","ax.legend([mean_smallparks, median_smallparks], labels= ['Mean', 'Median']);\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"UdZ2NaiWIKPE","executionInfo":{"status":"ok","timestamp":1705104550514,"user_tz":300,"elapsed":705,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"f877f7ca-93b5-45e5-b12f-f2a1780a65af"},"execution_count":108,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-108-cd886e7a8939>:7: UserWarning: You have mixed positional and keyword arguments, some input may be discarded.\n","  ax.legend([mean_smallparks, median_smallparks], labels= ['Mean', 'Median']);\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["A reader with no context to the making of the graph should easily be able to recognize that the majority of parks in Philadelphia are very small with most being under 2 acres.\n"],"metadata":{"id":"oaSdQh6qJvxO"}},{"cell_type":"code","source":["group_park = pparks.groupby(['PARENT_NAME']). sum ()\n","group_park"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":509},"id":"2Rjc_WYlJ-1-","executionInfo":{"status":"ok","timestamp":1705104688950,"user_tz":300,"elapsed":130,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"d398e3d6-267f-4b12-bd8d-0896859d17a7"},"execution_count":110,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-110-76cccb9010a1>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n","  group_park = pparks.groupby(['PARENT_NAME']). sum ()\n"]},{"output_type":"execute_result","data":{"text/plain":["                                   OBJECTID  DPP_ASSET_ID  ZIP_CODE  \\\n","PARENT_NAME                                                           \n","10th and Lemon Playground                36          2914     19123   \n","11th and Cecil B Moore Playground       176          1135     19122   \n","12th and Cambria Playground             254          1800     19133   \n","18th and Jackson War Memorial           373          1215     19145   \n","22nd and Catharine Park                 374          1222     19146   \n","...                                     ...           ...       ...   \n","Womrath Park                            256           120     19124   \n","Wooden Bridge Run                        71          1632     19114   \n","Woodside Park                           243          1840     19131   \n","Woodward Pines                          294          2823     19118   \n","Yorktown Commons                       2775         20997    114732   \n","\n","                                     ACREAGE    Shape__Area  Shape__Length  \n","PARENT_NAME                                                                 \n","10th and Lemon Playground           0.218885    1509.675781     169.494221  \n","11th and Cecil B Moore Playground   5.181666   35754.375000     755.891229  \n","12th and Cambria Playground         2.337374   16136.882812     542.995987  \n","18th and Jackson War Memorial       0.083383     574.429688     148.363162  \n","22nd and Catharine Park             0.046244     318.761719      78.402701  \n","...                                      ...            ...            ...  \n","Womrath Park                        2.167680   14970.460938     591.724807  \n","Wooden Bridge Run                  49.095667  339623.484375    4653.000056  \n","Woodside Park                       2.619728   18088.925781     615.286813  \n","Woodward Pines                      1.354531    9370.800781     755.404286  \n","Yorktown Commons                    0.776328    5356.140625     880.120482  \n","\n","[388 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-e2838b15-547c-4474-b4e5-238fba0aa807\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>OBJECTID</th>\n","      <th>DPP_ASSET_ID</th>\n","      <th>ZIP_CODE</th>\n","      <th>ACREAGE</th>\n","      <th>Shape__Area</th>\n","      <th>Shape__Length</th>\n","    </tr>\n","    <tr>\n","      <th>PARENT_NAME</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>10th and Lemon Playground</th>\n","      <td>36</td>\n","      <td>2914</td>\n","      <td>19123</td>\n","      <td>0.218885</td>\n","      <td>1509.675781</td>\n","      <td>169.494221</td>\n","    </tr>\n","    <tr>\n","      <th>11th and Cecil B Moore Playground</th>\n","      <td>176</td>\n","      <td>1135</td>\n","      <td>19122</td>\n","      <td>5.181666</td>\n","      <td>35754.375000</td>\n","      <td>755.891229</td>\n","    </tr>\n","    <tr>\n","      <th>12th and Cambria Playground</th>\n","      <td>254</td>\n","      <td>1800</td>\n","      <td>19133</td>\n","      <td>2.337374</td>\n","      <td>16136.882812</td>\n","      <td>542.995987</td>\n","    </tr>\n","    <tr>\n","      <th>18th and Jackson War Memorial</th>\n","      <td>373</td>\n","      <td>1215</td>\n","      <td>19145</td>\n","      <td>0.083383</td>\n","      <td>574.429688</td>\n","      <td>148.363162</td>\n","    </tr>\n","    <tr>\n","      <th>22nd and Catharine Park</th>\n","      <td>374</td>\n","      <td>1222</td>\n","      <td>19146</td>\n","      <td>0.046244</td>\n","      <td>318.761719</td>\n","      <td>78.402701</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Womrath Park</th>\n","      <td>256</td>\n","      <td>120</td>\n","      <td>19124</td>\n","      <td>2.167680</td>\n","      <td>14970.460938</td>\n","      <td>591.724807</td>\n","    </tr>\n","    <tr>\n","      <th>Wooden Bridge Run</th>\n","      <td>71</td>\n","      <td>1632</td>\n","      <td>19114</td>\n","      <td>49.095667</td>\n","      <td>339623.484375</td>\n","      <td>4653.000056</td>\n","    </tr>\n","    <tr>\n","      <th>Woodside Park</th>\n","      <td>243</td>\n","      <td>1840</td>\n","      <td>19131</td>\n","      <td>2.619728</td>\n","      <td>18088.925781</td>\n","      <td>615.286813</td>\n","    </tr>\n","    <tr>\n","      <th>Woodward Pines</th>\n","      <td>294</td>\n","      <td>2823</td>\n","      <td>19118</td>\n","      <td>1.354531</td>\n","      <td>9370.800781</td>\n","      <td>755.404286</td>\n","    </tr>\n","    <tr>\n","      <th>Yorktown Commons</th>\n","      <td>2775</td>\n","      <td>20997</td>\n","      <td>114732</td>\n","      <td>0.776328</td>\n","      <td>5356.140625</td>\n","      <td>880.120482</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>388 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2838b15-547c-4474-b4e5-238fba0aa807')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e2838b15-547c-4474-b4e5-238fba0aa807 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e2838b15-547c-4474-b4e5-238fba0aa807');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1a42af36-cc22-4356-9b86-8870e652d4e2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a42af36-cc22-4356-9b86-8870e652d4e2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1a42af36-cc22-4356-9b86-8870e652d4e2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["pair = ['smallparks', 'group_park']\n","pair"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FgaVxPsJK8tY","executionInfo":{"status":"ok","timestamp":1705105314536,"user_tz":300,"elapsed":130,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"335c1526-3308-4fda-8006-4911c96ace18"},"execution_count":115,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['smallparks', 'group_park']"]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["sns.pairplot(group_park[pair], size=2.0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"jdulAgwOLzGa","executionInfo":{"status":"error","timestamp":1705105317108,"user_tz":300,"elapsed":161,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"4d30d03f-5df0-45af-f10e-3a29dfd4a105"},"execution_count":116,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"None of [Index(['smallparks', 'group_park'], dtype='object')] are in the [columns]\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-116-f3f2e7b74f44>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpairplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup_park\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpair\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3811\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3812\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3813\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3814\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3815\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6068\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6069\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6070\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6071\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6072\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6128\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6129\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6130\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6132\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['smallparks', 'group_park'], dtype='object')] are in the [columns]\""]}]},{"cell_type":"code","source":["groupmean = group_park['ACREAGE'].mean()\n","groupmedian = group_park['ACREAGE'].median()\n","print('The Mean of the grouped Parks is:', groupmean)\n","print('The Median of the Grouped Parks is:', groupmedian)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4YubtXSgMr5_","executionInfo":{"status":"ok","timestamp":1705105506047,"user_tz":300,"elapsed":106,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"95859b3f-4773-4c80-fbdb-10edda84bf10"},"execution_count":118,"outputs":[{"output_type":"stream","name":"stdout","text":["The Mean of the grouped Parks is: 26.124801128015463\n","The Median of the Grouped Parks is: 3.03529379\n"]}]},{"cell_type":"code","source":["ax = group_park[\"ACREAGE\"].hist(bins=20)\n","ax.axvline(groupmean, color='red', linestyle='solid', linewidth=1.5, aplha= .8)\n","ax.axvline(groupmedian, color='green', linestyle='solid', linewidth=1.5, alpha= .8)\n","ax.legend([groupmean, groupmedian], labels = ['mean', 'median'])\n","ax.set_xlabel('Park size in acres')\n","ax.set_ylabel('Number of parks')\n","\n","pylab.title('parent parks')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":802},"id":"H3yxDz22NfMd","executionInfo":{"status":"error","timestamp":1705106160606,"user_tz":300,"elapsed":400,"user":{"displayName":"Samuel Griffith","userId":"14780961940054914300"}},"outputId":"ca9722b7-9700-4369-e4ab-fb087e979d3b"},"execution_count":123,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"Line2D.set() got an unexpected keyword argument 'aplha'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-123-8ead013aa63a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgroup_park\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ACREAGE\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxvline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroupmean\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'solid'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maplha\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;36m.8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxvline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroupmedian\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'solid'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;36m.8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mgroupmean\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroupmedian\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'mean'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'median'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Park size in acres'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36maxvline\u001b[0;34m(self, x, ymin, ymax, **kwargs)\u001b[0m\n\u001b[1;32m    838\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    839\u001b[0m         \u001b[0mtrans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_xaxis_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwhich\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'grid'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 840\u001b[0;31m         \u001b[0ml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mymin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mymax\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrans\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    841\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    842\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mscalex\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/_api/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    452\u001b[0m                 \u001b[0;34m\"parameter will become keyword-only %(removal)s.\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    453\u001b[0m                 name=name, obj_type=f\"parameter of {func.__name__}()\")\n\u001b[0;32m--> 454\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;31m# Don't modify *func*'s signature, as boilerplate.py needs it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/lines.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, xdata, ydata, linewidth, linestyle, color, gapcolor, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\u001b[0m\n\u001b[1;32m    391\u001b[0m         \u001b[0;31m# update kwargs before updating data to give the caller a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m         \u001b[0;31m# chance to init axes (and hence unit support)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 393\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_update\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pickradius\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickradius\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mind_offset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_internal_update\u001b[0;34m(self, kwargs)\u001b[0m\n\u001b[1;32m   1221\u001b[0m         \u001b[0mThe\u001b[0m \u001b[0mlack\u001b[0m \u001b[0mof\u001b[0m \u001b[0mprenormalization\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mto\u001b[0m \u001b[0mmaintain\u001b[0m \u001b[0mbackcompatibility\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1222\u001b[0m         \"\"\"\n\u001b[0;32m-> 1223\u001b[0;31m         return self._update_props(\n\u001b[0m\u001b[1;32m   1224\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"{cls.__name__}.set() got an unexpected keyword argument \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1225\u001b[0m             \"{prop_name!r}\")\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_update_props\u001b[0;34m(self, props, errfmt)\u001b[0m\n\u001b[1;32m   1195\u001b[0m                     \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"set_{k}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1197\u001b[0;31m                         raise AttributeError(\n\u001b[0m\u001b[1;32m   1198\u001b[0m                             errfmt.format(cls=type(self), prop_name=k))\n\u001b[1;32m   1199\u001b[0m                     \u001b[0mret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: Line2D.set() got an unexpected keyword argument 'aplha'"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}